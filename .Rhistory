#           parallel_optim = list(run = T, cl = parallel::makeCluster(spec = parallel::detectCores())),
#           MyModelName = paste("m3_k3.s", s, sep = "")
#         )
#       },
#     error = function(e) cat("ERROR :",conditionMessage(e), "\n")
#   )
#
#   cat('\n\n')
#   print(m3_k3)
#   cat('\n\n')
#
#   save(list = "m3_k3", file = paste(path.main, "/model", "/fitted_model_aim3_", s, ".RData", sep = ""))
# }
#
# t3 = Sys.time()
#
# sink(file = NULL)
# ##############
t1-t0
t2-t1
names(1:3)
library(LCTMC)
devtools::check()
library(LCTMC)
devtools::check()
rm(list = ls())
today.yyyymmdd = gsub("-", "", as.character(Sys.Date()))
### libraries
library(LCTMC)
init_run = 1
tot_runs = 1
t0 = Sys.time()
path.main = "C:/Users/Jacky/Desktop/stuff/data_N10k_obs10_maxT90"
#########################################################################################################################
#### aim 1 ---------------
sink(file = paste(path.main, "/log_aim1_model_output_v", today.yyyymmdd, ".txt", sep = ""))
for(s in init_run:tot_runs){
load(paste(path.main, "/data", "/sim_data_aim1_", s, ".RData", sep = ""))
data1 = aim1_data$df
m1_k3 = NA
tryCatch(
expr =
{
data1.temp = data1$obsTime - dplyr::lag(data1$obsTime)
data1.temp = data1.temp[!is.na(data1.temp) & data1.temp > 0]
m1_k3 = lctmc_2x2(
# data
data = data1,
# any scaling transformation
dt_scale = c(dt = 1/max(data1.temp)),
x_scale = c(x0 = 1, x1 = 1/ceiling(max(abs(data1$x1))) , x2 = 1),
w_scale = c(w0 = 1, w1 = 1/ceiling(max(abs(data1$w1))) , w2 = 1),
# general model specification
K = 3L,
X_names = c('x0', 'x1', 'x2'),
W_names = c('w0', 'w1', 'w2'),
par_constraint = c(alpha1.1 = 0, alpha1.2 = 0, alpha2.1 = 0, alpha2.2 = 0),
# controls ~ gen_inits
N_sub = Inf,
pct_keep = seq(0.40, 1.00, 0.001),
parallelize = TRUE,
which_step1 = "best",
# controls ~ EM
theta.names = gen_theta_names(K = 3L, type = "2x2", purpose = "em"),
EM_controls = list(maxit = 50, ELL_tol = 1e-1, LPY_tol = 1e-3, par_tol = 1e-3),
optim_controls = list(fnscale = -nrow(data1), maxit = 1e8, factr = 1e-4),
# controls ~ Hessian
# misc.
test_if_global_optim = list(test = T, true_params = aim1_data$true_param),
parallel_optim = list(run = T, cl = parallel::makeCluster(spec = parallel::detectCores())),
MyModelName = paste("m1_k3.s", s, sep = "")
)
},
error = function(e) cat("ERROR :",conditionMessage(e), "\n")
)
cat('\n\n')
print(m1_k3)
cat('\n\n')
save(list = "m1_k3", file = paste(path.main, "/model", "/fitted_model_aim1_", s, ".RData", sep = ""))
}
t1 = Sys.time()
sink(file = NULL)
##############
# #### aim 2 ---------------
# sink(file = paste(path.main, "/log_aim2_model_output_v", today.yyyymmdd, ".txt", sep = ""))
#
# for(s in init_run:tot_runs){
#   load(paste(path.main, "/data", "/sim_data_aim2_", s, ".RData", sep = ""))
#   data2 = aim2_data$df
#
#   m2_k3 = NA
#
#   tryCatch(
#     expr =
#       {
#         data2.temp = data2$obsTime - dplyr::lag(data2$obsTime)
#         data2.temp = data2.temp[!is.na(data2.temp) & data2.temp > 0]
#
#         m2_k3 = lctmc_3x3(
#           # data
#           data = data2,
#           # any scaling transformation
#           dt_scale = c(dt = 1/max(data2.temp)),
#           x_scale = c(x0 = 1, x1 = 1/ceiling(max(abs(data2$x1))), x2 = 1),
#           w_scale = c(w0 = 1, w1 = 1/ceiling(max(abs(data2$w1))), w2 = 1),
#           # general model specification
#           K = 3L,
#           X_names = c('x0', 'x1', 'x2'),
#           W_names = c('w0', 'w1', 'w2'),
#           par_constraint = c(alpha1.1 = 0, alpha2.1 = 0, alpha1.2 = 0, alpha2.2 = 0),
#           # controls ~ gen_inits
#           N_sub = Inf,
#           pct_keep = seq(0.40, 1.00, 0.001),
#           parallelize = TRUE,
#           which_step1 = "best",
#           # controls ~ EM
#           theta.names = gen_theta_names(K = 3L, type = "3x3", purpose = "em"),
#           EM_controls = list(maxit = 50, ELL_tol = 1e-1, LPY_tol = 1e-3, par_tol = 1e-3),
#           optim_controls = list(fnscale = -nrow(data2), maxit = 1e8, factr = 1e-4),
#           # controls ~ Hessian
#           # misc.
#           test_if_global_optim = list(test = T, true_params = aim2_data$true_param),
#           parallel_optim = list(run = T, cl = parallel::makeCluster(spec = parallel::detectCores())),
#           MyModelName = paste("m2_k3.s", s, sep = "")
#         )
#       },
#     error = function(e) cat("ERROR :",conditionMessage(e), "\n")
#   )
#
#   cat('\n\n')
#   print(m2_k3)
#   cat('\n\n')
#
#   save(list = "m2_k3", file = paste(path.main, "/model", "/fitted_model_aim2_", s, ".RData", sep = ""))
# }
#
# t2 = Sys.time()
#
# sink(file = NULL)
# ##############
# #### aim 3 ---------------
# sink(file = paste(path.main, "", "/log_aim3_model_output_v", today.yyyymmdd, ".txt", sep = ""))
#
# for(s in init_run:tot_runs){
#   load(paste(path.main, "/data", "/sim_data_aim3_", s, ".RData", sep = ""))
#   data3 = aim3_data$df
#
#   m3_k3 = NA
#
#   tryCatch(
#     expr =
#       {
#         data3.temp = data3$obsTime - dplyr::lag(data3$obsTime)
#         data3.temp = data3.temp[!is.na(data3.temp) & data3.temp > 0]
#
#         m3_k3 = lctmc_3x3(
#           # data
#           data = data3,
#           # any scaling transformation
#           dt_scale = c(dt = 1/max(data3.temp)) ,
#           x_scale = c(x0 = 1, x1 = 1/ceiling(max(abs(data3$x1))) , x2 = 1),
#           w_scale = c(w0 = 1, w1 = 1/ceiling(max(abs(data3$w1))) , w2 = 1),
#           # general model specification
#           K = 3L,
#           X_names = c('x0', 'x1', 'x2'),
#           W_names = c('w0', 'w1', 'w2'),
#           par_constraint = NULL,
#           # controls ~ gen_inits
#           N_sub = Inf,
#           pct_keep = seq(0.40, 1.00, 0.001),
#           parallelize = TRUE,
#           which_step1 = "best",
#           # controls ~ EM
#           theta.names = gen_theta_names(K = 3L, type = "3x3", purpose = "em"),
#           EM_controls = list(maxit = 50, ELL_tol = 1e-1, LPY_tol = 1e-3, par_tol = 1e-3),
#           optim_controls = list(fnscale = -nrow(data3), maxit = 1e8, factr = 1e-4),
#           # controls ~ Hessian
#           # misc.
#           test_if_global_optim = list(test = T, true_params = aim3_data$true_param),
#           parallel_optim = list(run = T, cl = parallel::makeCluster(spec = parallel::detectCores())),
#           MyModelName = paste("m3_k3.s", s, sep = "")
#         )
#       },
#     error = function(e) cat("ERROR :",conditionMessage(e), "\n")
#   )
#
#   cat('\n\n')
#   print(m3_k3)
#   cat('\n\n')
#
#   save(list = "m3_k3", file = paste(path.main, "/model", "/fitted_model_aim3_", s, ".RData", sep = ""))
# }
#
# t3 = Sys.time()
#
# sink(file = NULL)
# ##############
t1-t0
t2-t1
library(LCTMC)
devtools::check()
grepl(pattern = "100", "100%")
grepl(pattern = "100", "100")
library(LCTMC)
devtools::check()
rm(list = ls())
today.yyyymmdd = gsub("-", "", as.character(Sys.Date()))
### libraries
library(LCTMC)
init_run = 1
tot_runs = 1
t0 = Sys.time()
path.main = "C:/Users/Jacky/Desktop/stuff/data_N10k_obs10_maxT90"
#########################################################################################################################
#### aim 1 ---------------
sink(file = paste(path.main, "/log_aim1_model_output_v", today.yyyymmdd, ".txt", sep = ""))
for(s in init_run:tot_runs){
load(paste(path.main, "/data", "/sim_data_aim1_", s, ".RData", sep = ""))
data1 = aim1_data$df
m1_k3 = NA
tryCatch(
expr =
{
data1.temp = data1$obsTime - dplyr::lag(data1$obsTime)
data1.temp = data1.temp[!is.na(data1.temp) & data1.temp > 0]
m1_k3 = lctmc_2x2(
# data
data = data1,
# any scaling transformation
dt_scale = c(dt = 1/max(data1.temp)),
x_scale = c(x0 = 1, x1 = 1/ceiling(max(abs(data1$x1))) , x2 = 1),
w_scale = c(w0 = 1, w1 = 1/ceiling(max(abs(data1$w1))) , w2 = 1),
# general model specification
K = 3L,
X_names = c('x0', 'x1', 'x2'),
W_names = c('w0', 'w1', 'w2'),
par_constraint = c(alpha1.1 = 0, alpha1.2 = 0, alpha2.1 = 0, alpha2.2 = 0),
# controls ~ gen_inits
N_sub = Inf,
pct_keep = seq(0.40, 1.00, 0.001),
parallelize = TRUE,
which_step1 = "best",
# controls ~ EM
theta.names = gen_theta_names(K = 3L, type = "2x2", purpose = "em"),
EM_controls = list(maxit = 50, ELL_tol = 1e-1, LPY_tol = 1e-3, par_tol = 1e-3),
optim_controls = list(fnscale = -nrow(data1), maxit = 1e8, factr = 1e-4),
# controls ~ Hessian
# misc.
test_if_global_optim = list(test = T, true_params = aim1_data$true_param),
parallel_optim = list(run = T, cl = parallel::makeCluster(spec = parallel::detectCores())),
MyModelName = paste("m1_k3.s", s, sep = "")
)
},
error = function(e) cat("ERROR :",conditionMessage(e), "\n")
)
cat('\n\n')
print(m1_k3)
cat('\n\n')
save(list = "m1_k3", file = paste(path.main, "/model", "/fitted_model_aim1_", s, ".RData", sep = ""))
}
t1 = Sys.time()
sink(file = NULL)
##############
#### aim 2 ---------------
sink(file = paste(path.main, "/log_aim2_model_output_v", today.yyyymmdd, ".txt", sep = ""))
for(s in init_run:tot_runs){
load(paste(path.main, "/data", "/sim_data_aim2_", s, ".RData", sep = ""))
data2 = aim2_data$df
m2_k3 = NA
tryCatch(
expr =
{
data2.temp = data2$obsTime - dplyr::lag(data2$obsTime)
data2.temp = data2.temp[!is.na(data2.temp) & data2.temp > 0]
m2_k3 = lctmc_3x3(
# data
data = data2,
# any scaling transformation
dt_scale = c(dt = 1/max(data2.temp)),
x_scale = c(x0 = 1, x1 = 1/ceiling(max(abs(data2$x1))), x2 = 1),
w_scale = c(w0 = 1, w1 = 1/ceiling(max(abs(data2$w1))), w2 = 1),
# general model specification
K = 3L,
X_names = c('x0', 'x1', 'x2'),
W_names = c('w0', 'w1', 'w2'),
par_constraint = c(alpha1.1 = 0, alpha2.1 = 0, alpha1.2 = 0, alpha2.2 = 0),
# controls ~ gen_inits
N_sub = Inf,
pct_keep = seq(0.40, 1.00, 0.001),
parallelize = TRUE,
which_step1 = "best",
# controls ~ EM
theta.names = gen_theta_names(K = 3L, type = "3x3", purpose = "em"),
EM_controls = list(maxit = 50, ELL_tol = 1e-1, LPY_tol = 1e-3, par_tol = 1e-3),
optim_controls = list(fnscale = -nrow(data2), maxit = 1e8, factr = 1e-4),
# controls ~ Hessian
# misc.
test_if_global_optim = list(test = T, true_params = aim2_data$true_param),
parallel_optim = list(run = T, cl = parallel::makeCluster(spec = parallel::detectCores())),
MyModelName = paste("m2_k3.s", s, sep = "")
)
},
error = function(e) cat("ERROR :",conditionMessage(e), "\n")
)
cat('\n\n')
print(m2_k3)
cat('\n\n')
save(list = "m2_k3", file = paste(path.main, "/model", "/fitted_model_aim2_", s, ".RData", sep = ""))
}
t2 = Sys.time()
sink(file = NULL)
##############
#### aim 3 ---------------
sink(file = paste(path.main, "", "/log_aim3_model_output_v", today.yyyymmdd, ".txt", sep = ""))
for(s in init_run:tot_runs){
load(paste(path.main, "/data", "/sim_data_aim3_", s, ".RData", sep = ""))
data3 = aim3_data$df
m3_k3 = NA
tryCatch(
expr =
{
data3.temp = data3$obsTime - dplyr::lag(data3$obsTime)
data3.temp = data3.temp[!is.na(data3.temp) & data3.temp > 0]
m3_k3 = lctmc_3x3(
# data
data = data3,
# any scaling transformation
dt_scale = c(dt = 1/max(data3.temp)) ,
x_scale = c(x0 = 1, x1 = 1/ceiling(max(abs(data3$x1))) , x2 = 1),
w_scale = c(w0 = 1, w1 = 1/ceiling(max(abs(data3$w1))) , w2 = 1),
# general model specification
K = 3L,
X_names = c('x0', 'x1', 'x2'),
W_names = c('w0', 'w1', 'w2'),
par_constraint = NULL,
# controls ~ gen_inits
N_sub = Inf,
pct_keep = seq(0.40, 1.00, 0.001),
parallelize = TRUE,
which_step1 = "best",
# controls ~ EM
theta.names = gen_theta_names(K = 3L, type = "3x3", purpose = "em"),
EM_controls = list(maxit = 50, ELL_tol = 1e-1, LPY_tol = 1e-3, par_tol = 1e-3),
optim_controls = list(fnscale = -nrow(data3), maxit = 1e8, factr = 1e-4),
# controls ~ Hessian
# misc.
test_if_global_optim = list(test = T, true_params = aim3_data$true_param),
parallel_optim = list(run = T, cl = parallel::makeCluster(spec = parallel::detectCores())),
MyModelName = paste("m3_k3.s", s, sep = "")
)
},
error = function(e) cat("ERROR :",conditionMessage(e), "\n")
)
cat('\n\n')
print(m3_k3)
cat('\n\n')
save(list = "m3_k3", file = paste(path.main, "/model", "/fitted_model_aim3_", s, ".RData", sep = ""))
}
t3 = Sys.time()
sink(file = NULL)
##############
t1-t0
t2-t1
t3-t2
?LCTMC:::gen_inits01_lctmc_2x2
LCTMC:::gen_inits_lctmc_2x2
?LCTMC:::gen_inits_lctmc_2x2
?mean
?kmeans
?kmeans
library(LCTMC)
?LCTMC:::fmt_rowwise_trans
?LCTMC:::gen_inits01_lctmc_2x2
?LCTMC:::gen_inits01_lctmc_3x3
?LCTMC:::gen_inits01_lctmc
?dplyr::mutate
?dplyr::mutate
library(LCTMC)
?LCTMC:::gen_inits01_lctmc_2x2
?LCTMC:::gen_inits01_lctmc
library(LCTMC)
?LCTMC:::gen_inits01_lctmc_2x2
library(LCTMC)
?LCTMC:::gen_inits02_lctmc_2x2
library(LCTMC)
devtools::check()
library(LCTMC)
devtools::check()
library(LCTMC)
devtools::check()
library(LCTMC)
devtools::check()
library(LCTMC)
?LCTMC:::get_SE_lctmc_2x2
library(LCTMC)
library(LCTMC)
?LCTMC::lctmc_2x2
library(LCTMC)
devtools::check()
library(LCTMC)
devtools::check()
library(LCTMC)
?LCTMC:::get_P_2x2
library(LCTMC)
?LCTMC:::get_P_2x2
library(LCTMC)
?LCTMC:::get_P_2x2
library(LCTMC)
?LCTMC:::get_P_2x2
library(LCTMC)
?LCTMC:::get_P_2x2
# 3x3 case -------------
# generate P
q12 = q21 = q23 = c(1.1, 0.5, 0.1, 2.2, 0.3)
library(LCTMC)
?LCTMC:::Li_2x2
library(LCTMC)
?LCTMC:::Li_2x2
library(LCTMC)
devtools::check()
nchaar("############################## ~ NOTE ~ #######################################")
nchar("############################## ~ NOTE ~ #######################################")
############################## ~ NOTE ~ #######################################
# (1) This is a 3x3 case example                                              #
# (2) The latent classes will be re-arranged                                  #
#     such that class 1 always have the largest alpha0 estimate               #
# (3) transformation are done following multinomial logistic regression model #
###############################################################################
## how many latent classes?
my_K = 3
## create names of alpha parameter for the MLE
names.a = expand.grid(c("alpha0", "alpha1", "alpha2"), 1:(my_K-1))
names.a = paste(names.a$Var1, ".", names.a$Var2, sep = "")
## create names of beta parameter for the MLE
names.b = expand.grid(c("beta0", "beta1", "beta2"), c("12", "21", "23"), 1:my_K)
names.b = paste(names.b$Var1, ".", names.b$Var2, "_", names.b$Var3, sep = "")
## create a vector of numeric value to serve as the MLE
my_mle = 1:(length(names.a) + length(names.b))
names(my_mle) = c(names.a, names.b)
## use function in the case when true parameters are NOT supplied
## works for any `my_K` >= 2
## warning message is normal
LCTMC::align_MLE_3x3(mle = my_mle, K = my_K)
## when `true is specified`
\dontrun{
library(LCTMC)
devtools::check()
library(LCTMC)
library(LCTMC)
library(LCTMC)
?LCTMC:::predict.lctmc_2x2
devtools::check()
library(LCTMC)
devtools::check()
LCTMC:::.__S3MethodsTable__.
?LCTMC::gen_theta_names
?LCTMC::align_MLE_2x2
?LCTMC::align_MLE_3x3
?LCTMC::lctmc
?LCTMC::lctmc
?LCTMC::lctmc_2x2
?LCTMC::lctmc_2x2
?LCTMC::bik_all
?LCTMC::lctmc_2x2
library(LCTMC)
?LCTMC::lctmc_2x2
library(LCTMC)
?LCTMC::lctmc_2x2
library(LCTMC)
?LCTMC::lctmc_2x2
library(LCTMC)
?LCTMC::lctmc_2x2
library(LCTMC)
?LCTMC::lctmc_2x2
library(LCTMC)
?LCTMC::lctmc_2x2
dd = data.frame(x = 1:5)
dd |> dplyr::mutate(y = x^2)
dd = data.frame(x = 1:5)
dd |> dplyr::mutate(y = x^2) |> class
dd = data.frame(x = 1:5)
dd |> dplyr::mutate(y = x^2) |> class()
dd = data.frame(x = 1:5)
dd dplyr::"%>%" dplyr::mutate(y = x^2) dplyr::"%>%" class()
dd = data.frame(x = 1:5)
dd `dplyr::"%>%"` dplyr::mutate(y = x^2) `dplyr::"%>%"` class()
dd = data.frame(x = 1:5)
dd `dplyr::%>%` dplyr::mutate(y = x^2) `dplyr::%>%` class()
"%>%" = dplyr::"%>%"
dd = data.frame(x = 1:5)
dd %>% dplyr::mutate(y = x^2) %>% class()
dd = data.frame(x = 1:5)
dd %>% dplyr::mutate(y = x^2)
dd = data.frame(x = 1:5)
dd %>% dplyr::mutate(y = x^2) %>% dplyr::select(x)
dd = data.frame(x = 1:5)
dd %>% dplyr::mutate(y = x^2) %>% dplyr::select(x) %>% class
dd = data.frame(x = 1:5)
dd %>% dplyr::mutate(y = x^2) %>% tibble::rownames_to_column(var = "id")
dd = data.frame(x = 1:5)
dd %>% dplyr::mutate(y = x^2) %>% tibble::rownames_to_column(var = "id") %>% class()
dd = data.frame(x = 1:5)
class(dd) = "HAHAHA"
dd %>% dplyr::mutate(y = x^2) %>% tibble::rownames_to_column(var = "id") %>% class()
library(LCTMC)
?LCTMC:::impute_bik
library(LCTMC)
?LCTMC::get_P_2x2
library(LCTMC)
devtools::check()
library(LCTMC)
library(LCTMC)
