sapply(bik, anyNA)
Map(f = function(x, temp = Reduce(`+`, bik)) x/temp, bik)
Map(f = function(x, temp = Reduce(`+`, bik)) x/temp, bik) |> class()
(Reduce(`+`, bik))
any(Reduce(`+`, bik) == 0)
sum(Reduce(`+`, bik) == 0)
which(Reduce(`+`, bik) == 0)
unique(df2$id)[c(1, 3, 7, 10)]
df2[df2$id %in% unique(df2$id)[c(1, 3, 7, 10)], ]
df2[df2$id %in% unique(df2$id)[c(1, 3, 7, 10)], ]$state_at_obsTime
df2[df2$id %in% unique(df2$id)[c(1, 3, 7, 10)], ]$state_at_transTime
table(df2[df2$id %in% unique(df2$id)[c(1, 3, 7, 10)], ]$state_at_transTime)
table(df2[df2$id %in% unique(xx$id)[c(1, 3, 7, 10)], ]$state_at_transTime)
sum(Reduce(`+`, bik) == 0)
table(df2$state_at_transTime)
table(unique(df2[c("id", "state_at_transTime")])$state_at_transTime)
table(unique(my_df_past[c("id", "state_at_transTime")])$state_at_transTime)
table(unique(my_df_past[c("id", "state_at_obsTime")])$state_at_transTime)
table(unique(my_df_past[c("id", "state_at_obsTime")])$state_at_obsTime)
my_df_past
my_df_past |> dplyr::group_by(id) |> dplyr::filter(length(unique(state_at_obsTime)) == 1 & (3 %in% unique(state_at_obsTime)))
xx
# make data
set.seed(456)
my_N_indiv = 3000
df2 = df2[df2$id %in% sample(unique(df2$id), size = my_N_indiv, replace = FALSE), ]
n_obs = 100
max_past_T = 81
pred_T = max_past_T * 1.005
my_df_past = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = runif(n = n_obs, min = 0.5, max = max_past_T)
rand_T = rand_T[order(rand_T)]
temp = data.frame(id = rep(unique(d$id), n_obs+1))
temp2 = NULL
for (rt in rand_T) {
temp2 = c(temp2, d$state_at_transTime[max(which(d$transTime <= rt))])
}
temp$obsTime = c(0, rand_T)
temp$state_at_obsTime = c(d$state_at_transTime[1], temp2)
temp$x1 = rep(unique(d$x1), n_obs+1)
temp$x2 = rep(unique(d$x2), n_obs+1)
temp$w1 = rep(unique(d$w1), n_obs+1)
temp$w2 = rep(unique(d$w2), n_obs+1)
temp[temp$state_at_obsTime != 3, ]
}
)
my_df_past
# aim 2 ----------
# load
load(paste(path.main, "/data", "/sim_data_aim2_", s, ".RData", sep = ""))
load(paste(path.main, "/model", "/fitted_model_aim2_", s, ".RData", sep = ""))
m2_k3$K = as.integer(m2_k3$K)
df2 = aim2_data$df.exact
# make data
set.seed(456)
my_N_indiv = 3000
df2 = df2[df2$id %in% sample(unique(df2$id), size = my_N_indiv, replace = FALSE), ]
n_obs = 100
max_past_T = 81
pred_T = max_past_T * 1.005
my_df_past = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = runif(n = n_obs, min = 0.5, max = max_past_T)
rand_T = rand_T[order(rand_T)]
temp = data.frame(id = rep(unique(d$id), n_obs+1))
temp2 = NULL
for (rt in rand_T) {
temp2 = c(temp2, d$state_at_transTime[max(which(d$transTime <= rt))])
}
temp$obsTime = c(0, rand_T)
temp$state_at_obsTime = c(d$state_at_transTime[1], temp2)
temp$x1 = rep(unique(d$x1), n_obs+1)
temp$x2 = rep(unique(d$x2), n_obs+1)
temp$w1 = rep(unique(d$w1), n_obs+1)
temp$w2 = rep(unique(d$w2), n_obs+1)
temp[temp$state_at_obsTime != 3, ]
}
)
my_df_pred.ans = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = pred_T
temp = data.frame(id = unique(d$id))
for (rt in rand_T) {
temp2 = d$state_at_transTime[max(which(d$transTime <= rt))]
}
temp$obsTime = rand_T
temp$state_at_obsTime = temp2
temp
}
)
my_df_past = do.call(`rbind`, my_df_past)
my_df_pred.ans = do.call(`rbind`, my_df_pred.ans)
rownames(my_df_past) = rownames(my_df_pred.ans) = NULL
my_df_pred = my_df_pred.ans[c("id", "obsTime")]
my_df_past
table(my_df_past$state_at_obsTime)
my_df_past |> dplyr::group_by(id) |> dplyr::summarise(n = dplyr::n())
rm(list = ls())
today.yyyymmdd = gsub("-", "", as.character(Sys.Date()))
### libraries
library(LCTMC)
s = 3
t0 = Sys.time()
path.main = "C:/Users/Jacky/Desktop/stuff/data_N10k_obs10_maxT90"
################
# aim 2 ----------
# load
load(paste(path.main, "/data", "/sim_data_aim2_", s, ".RData", sep = ""))
load(paste(path.main, "/model", "/fitted_model_aim2_", s, ".RData", sep = ""))
m2_k3$K = as.integer(m2_k3$K)
df2 = aim2_data$df.exact
# make data
set.seed(456)
my_N_indiv = 3000
df2 = df2[df2$id %in% sample(unique(df2$id), size = my_N_indiv, replace = FALSE), ]
n_obs = 100
max_past_T = 81
pred_T = max_past_T * 1.005
my_df_past = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = runif(n = n_obs, min = 0.5, max = max_past_T)
rand_T = rand_T[order(rand_T)]
temp = data.frame(id = rep(unique(d$id), n_obs+1))
temp2 = NULL
for (rt in rand_T) {
temp2 = c(temp2, d$state_at_transTime[max(which(d$transTime <= rt))])
}
temp$obsTime = c(0, rand_T)
temp$state_at_obsTime = c(d$state_at_transTime[1], temp2)
temp$x1 = rep(unique(d$x1), n_obs+1)
temp$x2 = rep(unique(d$x2), n_obs+1)
temp$w1 = rep(unique(d$w1), n_obs+1)
temp$w2 = rep(unique(d$w2), n_obs+1)
temp = temp[temp$state_at_obsTime != 3, ]
if (nrow(temp) == 1) {
temp = NULL
}
temp
}
)
my_df_pred.ans = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = pred_T
temp = data.frame(id = unique(d$id))
for (rt in rand_T) {
temp2 = d$state_at_transTime[max(which(d$transTime <= rt))]
}
temp$obsTime = rand_T
temp$state_at_obsTime = temp2
temp
}
)
my_df_past = do.call(`rbind`, my_df_past)
my_df_pred.ans = do.call(`rbind`, my_df_pred.ans)
rownames(my_df_past) = rownames(my_df_pred.ans) = NULL
my_df_pred = my_df_pred.ans[c("id", "obsTime")]
table(my_df_past$state_at_obsTime)
(my_df_past |> dplyr::group_by(id) |> dplyr::summarise(n = dplyr::n()))$m
(my_df_past |> dplyr::group_by(id) |> dplyr::summarise(n = dplyr::n()))$n
table((my_df_past |> dplyr::group_by(id) |> dplyr::summarise(n = dplyr::n()))$n)
# prediction
my_pred = predict(object = m2_k3,
df_pred = my_df_pred,
df_past = my_df_past,
param.type = "mle")
rm(list = ls())
today.yyyymmdd = gsub("-", "", as.character(Sys.Date()))
### libraries
library(LCTMC)
s = 3
t0 = Sys.time()
path.main = "C:/Users/Jacky/Desktop/stuff/data_N10k_obs10_maxT90"
################
# aim 2 ----------
# load
load(paste(path.main, "/data", "/sim_data_aim2_", s, ".RData", sep = ""))
load(paste(path.main, "/model", "/fitted_model_aim2_", s, ".RData", sep = ""))
m2_k3$K = as.integer(m2_k3$K)
df2 = aim2_data$df.exact
# make data
set.seed(456)
my_N_indiv = 3000
df2 = df2[df2$id %in% sample(unique(df2$id), size = my_N_indiv, replace = FALSE), ]
n_obs = 100
max_past_T = 81
pred_T = max_past_T * 1.005
my_df_past = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = runif(n = n_obs, min = 0.5, max = max_past_T)
rand_T = rand_T[order(rand_T)]
temp = data.frame(id = rep(unique(d$id), n_obs+1))
temp2 = NULL
for (rt in rand_T) {
temp2 = c(temp2, d$state_at_transTime[max(which(d$transTime <= rt))])
}
temp$obsTime = c(0, rand_T)
temp$state_at_obsTime = c(d$state_at_transTime[1], temp2)
temp$x1 = rep(unique(d$x1), n_obs+1)
temp$x2 = rep(unique(d$x2), n_obs+1)
temp$w1 = rep(unique(d$w1), n_obs+1)
temp$w2 = rep(unique(d$w2), n_obs+1)
temp = temp[temp$state_at_obsTime != 3, ]
if (nrow(temp) == 1) {
temp = NULL
}
temp
}
)
my_df_pred.ans = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = pred_T
temp = data.frame(id = unique(d$id))
rt = rand_T
temp2 = d$state_at_transTime[max(which(d$transTime <= rt))]
temp$obsTime = rand_T
temp$state_at_obsTime = temp2
temp
}
)
my_df_past = do.call(`rbind`, my_df_past)
my_df_pred.ans = do.call(`rbind`, my_df_pred.ans)
rownames(my_df_past) = rownames(my_df_pred.ans) = NULL
my_df_pred = my_df_pred.ans[c("id", "obsTime")] |> dplyr::filter(id %in% my_df_past$id)
# prediction
my_pred = predict(object = m2_k3,
df_pred = my_df_pred,
df_past = my_df_past,
param.type = "mle")
# test latent class
zz = dplyr::left_join(
df2 |> dplyr::select(id, latent_class) |> dplyr::distinct(),
my_pred$df_pred.lc,
by = "id"
)
table(zz$latent_class, zz$pred_class, useNA = 'always')
mean(zz$latent_class == zz$pred_class)
# test latent class
zz = dplyr::left_join(
my_pred$df_pred.lc,
df2 |> dplyr::select(id, latent_class) |> dplyr::distinct(),
by = "id"
)
table(zz$latent_class, zz$pred_class, useNA = 'always')
mean(zz$latent_class == zz$pred_class)
# test disease state
qq = dplyr::left_join(
my_pred$df_pred.ds,
my_df_pred_ans,
by = c('id', "obsTime")
)
table(qq$state_at_obsTime, qq$pred_state, useNA = 'always')
# test disease state
qq = dplyr::left_join(
my_pred$df_pred.ds,
my_df_pred.ans,
by = c('id', "obsTime")
)
table(qq$state_at_obsTime, qq$pred_state, useNA = 'always')
mean(qq$state_at_obsTime == qq$pred_state)
rm(list = ls())
today.yyyymmdd = gsub("-", "", as.character(Sys.Date()))
### libraries
library(LCTMC)
s = 3
t0 = Sys.time()
path.main = "C:/Users/Jacky/Desktop/stuff/data_N10k_obs10_maxT90"
################
# # aim 1 ----------
# # load
# load(paste(path.main, "/data", "/sim_data_aim1_", s, ".RData", sep = ""))
# load(paste(path.main, "/model", "/fitted_model_aim1_", s, ".RData", sep = ""))
# m1_k3$K = as.integer(m1_k3$K)
# df1 = aim1_data$df.exact
#
# # make data
# set.seed(456)
# my_N_indiv = 3000
# df1 = df1[df1$id %in% sample(unique(df1$id), size = my_N_indiv, replace = FALSE), ]
#
# n_obs = 100
# max_past_T = 81
# pred_T = max_past_T * 1.005
#
# my_df_past = lapply(
#   X = split(x = df1, f = df1$id),
#   FUN = function(d) {
#     rand_T = runif(n = n_obs, min = 0.5, max = max_past_T)
#     rand_T = rand_T[order(rand_T)]
#
#     temp = data.frame(id = rep(unique(d$id), n_obs+1))
#     temp2 = NULL
#     for (rt in rand_T) {
#       temp2 = c(temp2, d$state_at_transTime[max(which(d$transTime <= rt))])
#     }
#
#     temp$obsTime = c(0, rand_T)
#     temp$state_at_obsTime = c(d$state_at_transTime[1], temp2)
#     temp$x1 = rep(unique(d$x1), n_obs+1)
#     temp$x2 = rep(unique(d$x2), n_obs+1)
#     temp$w1 = rep(unique(d$w1), n_obs+1)
#     temp$w2 = rep(unique(d$w2), n_obs+1)
#
#     temp
#   }
# )
#
# my_df_pred.ans = lapply(
#   X = split(x = df1, f = df1$id),
#   FUN = function(d) {
#     rand_T = pred_T
#
#     temp = data.frame(id = unique(d$id))
#     rt = rand_T
#     temp2 = d$state_at_transTime[max(which(d$transTime <= rt))]
#
#     temp$obsTime = rand_T
#     temp$state_at_obsTime = temp2
#
#     temp
#   }
# )
# my_df_past = do.call(`rbind`, my_df_past)
# my_df_pred.ans = do.call(`rbind`, my_df_pred.ans)
# rownames(my_df_past) = rownames(my_df_pred.ans) = NULL
#
# my_df_pred = my_df_pred.ans[c("id", "obsTime")]
#
#
# # prediction
# my_pred = predict(object = m1_k3,
#                   df_pred = my_df_pred,
#                   df_past = my_df_past,
#                   param.type = "mle")
#
# # test latent class
# zz = dplyr::left_join(
#   my_pred$df_pred.lc,
#   df1 |> dplyr::select(id, latent_class) |> dplyr::distinct(),
#   by = "id"
# )
# table(zz$latent_class, zz$pred_class, useNA = 'always')
# mean(zz$latent_class == zz$pred_class)
#
# # test disease state
# qq = dplyr::left_join(
#   my_pred$df_pred.ds,
#   my_df_pred.ans,
#   by = c('id', "obsTime")
# )
# table(qq$state_at_obsTime, qq$pred_state, useNA = 'always')
# mean(qq$state_at_obsTime == qq$pred_state)
#
#
# ###########
# aim 2 ----------
# load
load(paste(path.main, "/data", "/sim_data_aim2_", s, ".RData", sep = ""))
load(paste(path.main, "/model", "/fitted_model_aim2_", s, ".RData", sep = ""))
m2_k3$K = as.integer(m2_k3$K)
df2 = aim2_data$df.exact
# make data
set.seed(456)
my_N_indiv = 3000
df2 = df2[df2$id %in% sample(unique(df2$id), size = my_N_indiv, replace = FALSE), ]
n_obs = 10
max_past_T = 50
pred_T = max_past_T * 1.1
my_df_past = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = runif(n = n_obs, min = 0.5, max = max_past_T)
rand_T = rand_T[order(rand_T)]
temp = data.frame(id = rep(unique(d$id), n_obs+1))
temp2 = NULL
for (rt in rand_T) {
temp2 = c(temp2, d$state_at_transTime[max(which(d$transTime <= rt))])
}
temp$obsTime = c(0, rand_T)
temp$state_at_obsTime = c(d$state_at_transTime[1], temp2)
temp$x1 = rep(unique(d$x1), n_obs+1)
temp$x2 = rep(unique(d$x2), n_obs+1)
temp$w1 = rep(unique(d$w1), n_obs+1)
temp$w2 = rep(unique(d$w2), n_obs+1)
temp = temp[temp$state_at_obsTime != 3, ]
if (nrow(temp) == 1) {
temp = NULL
}
temp
}
)
my_df_pred.ans = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = pred_T
temp = data.frame(id = unique(d$id))
rt = rand_T
temp2 = d$state_at_transTime[max(which(d$transTime <= rt))]
temp$obsTime = rand_T
temp$state_at_obsTime = temp2
temp
}
)
my_df_past = do.call(`rbind`, my_df_past)
my_df_pred.ans = do.call(`rbind`, my_df_pred.ans)
rownames(my_df_past) = rownames(my_df_pred.ans) = NULL
my_df_pred = my_df_pred.ans[c("id", "obsTime")] |> dplyr::filter(id %in% my_df_past$id)
# prediction
my_pred = predict(object = m2_k3,
df_pred = my_df_pred,
df_past = my_df_past,
param.type = "mle")
# test latent class
zz = dplyr::left_join(
my_pred$df_pred.lc,
df2 |> dplyr::select(id, latent_class) |> dplyr::distinct(),
by = "id"
)
table(zz$latent_class, zz$pred_class, useNA = 'always')
mean(zz$latent_class == zz$pred_class)
# test disease state
qq = dplyr::left_join(
my_pred$df_pred.ds,
my_df_pred.ans,
by = c('id', "obsTime")
)
table(qq$state_at_obsTime, qq$pred_state, useNA = 'always')
mean(qq$state_at_obsTime == qq$pred_state)
###########
# aim 2 ----------
# load
load(paste(path.main, "/data", "/sim_data_aim2_", s, ".RData", sep = ""))
load(paste(path.main, "/model", "/fitted_model_aim2_", s, ".RData", sep = ""))
m2_k3$K = as.integer(m2_k3$K)
df2 = aim2_data$df.exact
# make data
set.seed(456)
my_N_indiv = 1000
df2 = df2[df2$id %in% sample(unique(df2$id), size = my_N_indiv, replace = FALSE), ]
n_obs = 10
max_past_T = 50
pred_T = max_past_T * 1.2
my_df_past = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = runif(n = n_obs, min = 0.5, max = max_past_T)
rand_T = rand_T[order(rand_T)]
temp = data.frame(id = rep(unique(d$id), n_obs+1))
temp2 = NULL
for (rt in rand_T) {
temp2 = c(temp2, d$state_at_transTime[max(which(d$transTime <= rt))])
}
temp$obsTime = c(0, rand_T)
temp$state_at_obsTime = c(d$state_at_transTime[1], temp2)
temp$x1 = rep(unique(d$x1), n_obs+1)
temp$x2 = rep(unique(d$x2), n_obs+1)
temp$w1 = rep(unique(d$w1), n_obs+1)
temp$w2 = rep(unique(d$w2), n_obs+1)
temp = temp[temp$state_at_obsTime != 3, ]
if (nrow(temp) == 1) {
temp = NULL
}
temp
}
)
my_df_pred.ans = lapply(
X = split(x = df2, f = df2$id),
FUN = function(d) {
rand_T = pred_T
temp = data.frame(id = unique(d$id))
rt = rand_T
temp2 = d$state_at_transTime[max(which(d$transTime <= rt))]
temp$obsTime = rand_T
temp$state_at_obsTime = temp2
temp
}
)
my_df_past = do.call(`rbind`, my_df_past)
my_df_pred.ans = do.call(`rbind`, my_df_pred.ans)
rownames(my_df_past) = rownames(my_df_pred.ans) = NULL
my_df_pred = my_df_pred.ans[c("id", "obsTime")] |> dplyr::filter(id %in% my_df_past$id)
# prediction
my_pred = predict(object = m2_k3,
df_pred = my_df_pred,
df_past = my_df_past,
param.type = "mle")
# test latent class
zz = dplyr::left_join(
my_pred$df_pred.lc,
df2 |> dplyr::select(id, latent_class) |> dplyr::distinct(),
by = "id"
)
table(zz$latent_class, zz$pred_class, useNA = 'always')
mean(zz$latent_class == zz$pred_class)
# test disease state
qq = dplyr::left_join(
my_pred$df_pred.ds,
my_df_pred.ans,
by = c('id', "obsTime")
)
table(qq$state_at_obsTime, qq$pred_state, useNA = 'always')
mean(qq$state_at_obsTime == qq$pred_state)
###########
rm(list = ls())
library(LCTMC)
