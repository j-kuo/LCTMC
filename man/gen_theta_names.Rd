% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_theta_names.R
\name{gen_theta_names}
\alias{gen_theta_names}
\title{Generates model parameter names}
\usage{
gen_theta_names(
  K = integer(),
  type = c("2x2", "3x3"),
  purpose = c("em", "bik")
)
}
\arguments{
\item{K}{an integer scalar. Used to determine the number of latent classes the model is fitting.}

\item{type}{a character scalar which is used to determine the type of latent class CTMC model, either \code{type = "2x2"} or \code{type = "3x3"}}

\item{purpose}{a character scalar to indicate whether the output list object should be formatted for the EM algorithm or for computing \eqn{b_{ik}}}
}
\value{
a list object containing the name of parameters
}
\description{
This function provides a convenient way of generating the parameter names of the latent class CTMC model. \cr
This is useful during the EM algorithm where we perform ECM steps by elements of this function's output list object. \cr
Or it is useful whenever \eqn{b_{ik}} should be computed, as those functions reference the parameter names internally,
and it would be inefficient to create the names via \code{paste()} every time
}
\examples{
# 2x2 case with 2 latent classes
theta_names.2x2.K2 = list(
  # alphas, class 1
  c("alpha0.1", "alpha1.1", "alpha2.1"),
  # betas, class 1
  c("beta0.12_1", "beta1.12_1", "beta2.12_1"),
  c("beta0.21_1", "beta1.21_1", "beta2.21_1"),
  # betas, class 2
  c("beta0.12_2", "beta1.12_2", "beta2.12_2"),
  c("beta0.21_2", "beta1.21_2", "beta2.21_2")
)

# 2x2 case with 3 latent classes
theta_names.2x2.K3 = list(
  # alphas, class 1
  c("alpha0.1", "alpha1.1", "alpha2.1"),
  # alphas, class 1
  c("alpha0.2", "alpha1.2", "alpha2.2"),
  # betas, class 1
  c("beta0.12_1", "beta1.12_1", "beta2.12_1"),
  c("beta0.21_1", "beta1.21_1", "beta2.21_1"),
  # betas, class 2
  c("beta0.12_2", "beta1.12_2", "beta2.12_2"),
  c("beta0.21_2", "beta1.21_2", "beta2.21_2"),
  # betas, class 3
  c("beta0.12_3", "beta1.12_3", "beta2.12_3"),
  c("beta0.21_3", "beta1.21_3", "beta2.21_3")
)

# print TRUE
identical(theta_names.2x2.K2, gen_theta_names(K = 2L, type = "2x2", purpose = "em"))
identical(theta_names.2x2.K3, gen_theta_names(K = 3L, type = "2x2", purpose = "em"))

# 3x3 case with 2 latent classes
theta_names.3x3.K2 = list(
  # alphas, class 1
  c("alpha0.1", "alpha1.1", "alpha2.1"),
  # betas, class 1
  c("beta0.12_1", "beta1.12_1", "beta2.12_1"),
  c("beta0.21_1", "beta1.21_1", "beta2.21_1"),
  c("beta0.23_1", "beta1.23_1", "beta2.23_1"),
  # betas, class 2
  c("beta0.12_2", "beta1.12_2", "beta2.12_2"),
  c("beta0.21_2", "beta1.21_2", "beta2.21_2"),
  c("beta0.23_2", "beta1.23_2", "beta2.23_2")
)

# prints TRUE
identical(theta_names.3x3.K2, gen_theta_names(K = 2L, type = "3x3", purpose = "em"))
}
