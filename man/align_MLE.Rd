% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/align_MLE.R
\name{align_MLE}
\alias{align_MLE}
\alias{align_MLE_2x2}
\alias{align_MLE_3x3}
\title{Re-order the MLE of estimated parameters}
\usage{
align_MLE_2x2(true, mle = c(), K = 3L)

align_MLE_3x3(true, mle = numeric(), K = 3L)
}
\arguments{
\item{true}{a list object obtained from \code{gen_true_param()} of the 'LCTMC.simulate' package.
When this argument is specified we can compare the true parameter values vs. the estimated MLE. (only used for simulation study purposes). \cr
Note user can create this object without the 'LCTMC.simulate', as long as the list is structured correctly.}

\item{mle}{a named numeric vector for the MLE of model parameters.}

\item{K}{an integer scalar. Use this variable to tell the function how many latent classes there should be. \cr
Note that the number of latent classes will affect the number of parameters in the model, thus the argument \code{theta.name} should be in sync with \code{K}}
}
\value{
A data frame object with the following columns:
\itemize{
\item \strong{names} - the name of the corresponding parameters.
\item \strong{true_theta} the true parameter value for the underlying data generation process.
\item \strong{mle_theta} - the MLE of the corresponding parameters.
}
}
\description{
This function re-orders the estimated MLE from fitting the latent CTMC model. The latent class model does not have a unique solution
because ordering the latent classes are interchangeable as long as the respective transition rate matrices are consistent.
To see this take a simple example of a three-category random variable with probability mass:
\deqn{
  P(X=1) = 1/2\\
  P(X=2) = 1/3\\
  P(X=3) = 1/6
}
The solutions could be parametrized as either (1/2, 1/3), (1/2, 1/6), or (1/3, 1/6)
as long as the category stays consistent (i.e., X=1 is attached to probability mass of 1/2, X=2 with probability 1/3, etc.). \cr
Therefore, this function's purpose is to re-order the classes such that each classes are sorted by the \code{alpha0} parameter in descending order
(i.e., \verb{alpha0.1 > alpha0.2 > ...})
}
\note{
Note that the argument \code{true} can be left unspecified so that we are only re-arranging the vector of MLE.
}
\examples{
############################## ~ NOTE ~ #######################################
# (1) This is a 3x3 case example                                              #
# (2) The latent classes will be re-arranged                                  #
#     such that class 1 always have the largest alpha0 estimate               #
# (3) transformation are done following multinomial logistic regression model #
###############################################################################

## how many latent classes?
my_K = 3

## create names of alpha parameter for the MLE
names.a = expand.grid(c("alpha0", "alpha1", "alpha2"), 1:(my_K-1))
names.a = paste(names.a$Var1, ".", names.a$Var2, sep = "")

## create names of beta parameter for the MLE
names.b = expand.grid(c("beta0", "beta1", "beta2"), c("12", "21", "23"), 1:my_K)
names.b = paste(names.b$Var1, ".", names.b$Var2, "_", names.b$Var3, sep = "")

## create a vector of numeric value to serve as the MLE
my_mle = 1:(length(names.a) + length(names.b))
names(my_mle) = c(names.a, names.b)

## use function in the case when true parameters are NOT supplied
## works for any `my_K` >= 2
## warning message is normal
LCTMC::align_MLE_3x3(mle = my_mle, K = my_K)

## when `true is specified`
\dontrun{
  # use the 'LCTMC.simulate' package to generate some true values
  my_true = LCTMC.simulate::gen_true_param(K_class = 3, M_state = 3)

  # use function in the case when true parameters are supplied
  # only works when `my_K` is equal to 3
  align_MLE_3x3(true = my_true, mle = my_mle, K = 3)
}
}
\seealso{
\code{\link[=lctmc_2x2]{lctmc_2x2()}}, [\code{\link[=lctmc_3x3]{lctmc_3x3()}}]
}
