% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_inits01_lctmc.R
\name{gen_inits01_lctmc}
\alias{gen_inits01_lctmc}
\alias{gen_inits01_lctmc_2x2}
\alias{gen_inits01_lctmc_3x3}
\title{Step 1/2 for generating initial value for model fitting}
\usage{
gen_inits01_lctmc_2x2(
  df,
  df_Xmat,
  df_Wmat,
  df_dt,
  K,
  par_constraint,
  parallel_optim,
  N_sub,
  pct_keep,
  parallelize
)

gen_inits01_lctmc_3x3(
  df,
  df_Xmat,
  df_Wmat,
  df_dt,
  K,
  par_constraint,
  parallel_optim,
  N_sub,
  pct_keep,
  parallelize
)
}
\arguments{
\item{df}{a data frame object containing row-wise transition data as binary variables. \cr
For example, if \code{trans.2_1} equals 1 then it means the observation was a transition from stage 2 to stage 1 within \code{df_dt} amount of time.}

\item{df_Xmat}{a matrix object housing the covariates that affect the CTMC portion of the model. \cr
This matrix should have the same number of rows as the data frame object, \code{df}}

\item{df_Wmat}{a matrix object housing the covariates that affect the latent classification part of the model. \cr
This matrix should have number of rows equal to unique number of individuals in the data frame object, \code{df}}

\item{df_dt}{a numeric vector housing the length of time interval between observations.
This vector's length should be equal to number of rows in the data frame object, \code{df}}

\item{K}{an integer scalar. Use this variable to tell the function how many latent classes there should be. \cr}

\item{par_constraint}{See documentation in \code{\link[=lctmc_2x2]{lctmc_2x2()}} or \code{\link[=lctmc_3x3]{lctmc_3x3()}}}

\item{parallel_optim}{See documentation in \code{\link[=lctmc_2x2]{lctmc_2x2()}} or \code{\link[=lctmc_3x3]{lctmc_3x3()}}}

\item{N_sub}{a numeric scalar. This is used for step 1 of initial value generation where the algorithm fits a traditional CTMC model for each individual. \cr
Fitting the model for \emph{all} individuals might have long run time without improvement in the accuracy of the estimation.
Thus, using this argument to set a maximum number of individuals to use for the initial value generation could save some computation time.}

\item{pct_keep}{a numeric vector where each element of the vector ranges from 0 to 1.
This argument controls what percentage of the individual effect should be used for the K-means algorithm for initial value generation.
The algorithm will consider all percentages specified in this vector. \cr
For example, for \code{pct_keep = c(0.5)}, after individuals effects are estimated, only the 25th to 75th percentile are fed into the K-Means algorithm to obtain cluster level estimates. \cr
Additionally, note that the threshold "1" is always appended to \code{pct_keep}, so it will always consider the 100\% case.}

\item{parallelize}{a logical scalar. Set to TRUE if we want the for-loop for the individual-wise CTMC to be parallelized}
}
\value{
A list containing the estimates obtained from the K-means algorithm.
This step outputs 3 elements:
\itemize{
\item \strong{step1_full} - a list object containing the estimation from using 100\% of individual effects (no trimming outliers, when \code{pct_keep = 1}). \cr
First is the the theta estimates, and second is a 'kmeans' object from \code{kmeans()}.
\item \strong{step1_best} - a single named numeric vector that yielded the best observed log-likelihood value by testing trying each vector from \code{step1}
}
}
\description{
Performs step 1 of the initial value generation. This is a two-stage k-means procedure, where stage 1 involves fitting a
traditional CTMC model to each individual in the \code{df} data frame. Then the individual effects are pooled and fed into a k-means algorithm to split
the estimate into \code{K} clusters.
}
\note{
This is the second step out of six of fitting a latent class CTMC model (i.e., generate initial values via a two stage k-means algorithm). \cr\cr
This is also part 1 of initial value generation,
which is an individual level fitting algorithm and then uses K-means method to perform clustering based on the individuals' effects. \cr
If using This method alone to model the data, it will very likely perform poorly.
Especially when there are only few observation per person, it becomes reliable when each individual has many observations. \cr
Regardless, this approach will still produce usable initial values for the next steps.
}
\examples{
# The example below demonstrates how to specify the 'lctmc' functions correctly
#   to perform the latent class CTMC model.
# Both the 2x2 and 3x3 examples are listed below, however it should be noted
#   that the models may take a while to run (approx. 10-30min on a high spec laptop)
# In both examples, we set the number of latent classes, K, to be 2.
# In the 2x2 model, we constrained the model so that the covariate effects on
#   the latent class probability are equal to 0.
# In the 3x3 model, we left the model un-constrained.


\dontrun{
  ## this is a 2x2 example, with 3 latent classes
  data("example_df2x2", package = "LCTMC")
  ctrl_2x2 = LCTMC::create_controls(type = "2x2", data = example_df2x2)

  model_2x2 = LCTMC::lctmc_2x2(
    # data
    data = example_df2x2,
    # general model specification
    K = 2L,
    X_names = c('x0', 'x1', 'x2'),
    W_names = c('w0', 'w1', 'w2'),
    par_constraint = c(alpha1.1 = 0, alpha2.1 = 0),
    # misc.
    controls = ctrl_2x2,
    parallel_optim = list(run = TRUE, cl = parallel::makeCluster(spec = parallel::detectCores()-1)),
    MyModelName = "My 2x2 (K2) model"
  )

  # - # - # - # - # - # - # - # - #

  ## this is a 3x3 example, with 3 latent classes
  data("example_df3x3", package = "LCTMC")
  ctrl_3x3 = LCTMC::create_controls(type = "3x3", data = example_df3x3)

  model_3x3 = LCTMC::lctmc_3x3(
    # data
    data = example_df3x3,
    # general model specification
    K = 2L,
    X_names = c('x0', 'x1', 'x2'),
    W_names = c('w0', 'w1', 'w2'),
    par_constraint = NULL,
    # misc.
    controls = ctrl_3x3,
    parallel_optim = list(run = T, cl = parallel::makeCluster(spec = parallel::detectCores()-1)),
    MyModelName = "My 3x3 (K2) Model"
  )
}
}
\seealso{
\code{\link[=lctmc_2x2]{lctmc_2x2()}}; \code{\link[=fmt_rowwise_trans]{fmt_rowwise_trans()}}; \code{\link[=gen_inits02_lctmc_2x2]{gen_inits02_lctmc_2x2()}}; \code{\link[=indiv_ctmc_2x2]{indiv_ctmc_2x2()}}
}
