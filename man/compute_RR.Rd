% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_RR.R
\name{compute_RR}
\alias{compute_RR}
\alias{compute_RR.lctmc_2x2}
\alias{compute_RR.lctmc_3x3}
\title{Compute transition rate ratios (RR)}
\usage{
compute_RR(m, x1, x2, ci_method)

\method{compute_RR}{lctmc_2x2}(m, x1, x2, ci_method)

\method{compute_RR}{lctmc_3x3}(m, x1, x2, ci_method)
}
\arguments{
\item{m}{a 'lctmc_2x2' or 'lctmc_3x3' object obtained from the \code{lctmc} functions}

\item{x1}{a numeric scalar. It is the covariate corresponding to the parameters \code{beta1.12_k}, \code{beta1.21_k}, and \code{beta1.23_k}}

\item{x2}{a numeric scalar. It is the covariate corresponding to the parameters \code{beta2.12_k}, \code{beta2.21_k}, and \code{beta2.23_k}}

\item{ci_method}{a character scalar. Either the "delta" method or "endpoint" method.}
}
\value{
A list object of length two.
The first element contains the RR for within-class transition rates, for 1-unit increase in covariate values.
The second element contains the RR for between-class comparison. Holding all covariates constant at the user specified values.
}
\description{
Computes the within-class and between-class transition rate ratios from the \eqn{Q} matrix. \cr
The within-class RR compares the transition rate \emph{within} latent class (i.e., holding the latent class constant),
when covariates are increased by 1-unit. \cr
The between-class rate ratios compares the transition \emph{across} latent class,
while holding covariates constant at the user specified values.
}
\note{
For within-class comparisons, the increment in covariate is always 1-unit.
The RR for 1-unit increase in \eqn{x_{1}}, for the transition from stage \eqn{r} to \eqn{s} of class \eqn{k} is the following:
\deqn{
  RR_{rs}^{(k)(W)} = \exp(\beta_{1rs}^{(k)})
}
where \eqn{\beta_{1rs}^{(k)}} is the coefficient associated with \eqn{x_{1}}. \cr
For between-class comparisons, the last class is always used as the referent group (denoted as \eqn{K'}).
The RR for the transition from stage \eqn{r} to \eqn{s} of class \eqn{k} vs. the referent class is:
\deqn{
  RR_{rs}^{(k)(B)} = \exp((\beta_{rs}^{(k)} - \beta_{rs}^{(K')}) \cdot X)
}
where \eqn{X} is the vector of covariates specified by the input arguments \code{x1} and \code{x2}.
}
\examples{
# load data
data("model_2x2", package = "LCTMC")
data("model_3x3", package = "LCTMC")


# Q matrix ---------
# 2x2
compute_Q(m = model_2x2, x1 = 1, x2 = 1)
# 3x3
compute_Q(m = model_3x3, x1 = 1, x2 = 1)


# Sojourn Times ---------
# 2x2
compute_sojourn(m = model_2x2, x1 = 1, x2 = 1)
# 3x3
compute_sojourn(m = model_3x3, x1 = 1, x2 = 1)


# Rate Ratios ---------
# 2x2
compute_RR(m = model_2x2, x1 = 1, x2 = 1, ci_method = 'delta')
# 3x3
compute_RR(m = model_3x3, x1 = 1, x2 = 1, ci_method = 'delta')


# Transition Probability ---------
# 2x2
compute_P(m = model_2x2, x1 = 1, x2 = 1, dt = 30)
# 3x3
compute_P(m = model_3x3, x1 = 1, x2 = 1, dt = 30)



# Transition Probability when t --> infty
lapply(
  X = compute_P(m = model_3x3, x1 = 1, x2 = 1, dt = 999999),
  FUN = function(x) round(x, 10)
)


# Transition Probability when t = 0
lapply(
  X = compute_P(m = model_3x3, x1 = 1, x2 = 1, dt = 0),
  FUN = function(x) round(x, 10)
)
}
\seealso{
\code{\link[=compute_Q]{compute_Q()}}
}
